$date
	Tue Jul 15 14:03:08 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var wire 16 ! instruction [15:0] $end
$var wire 8 " current_pc [7:0] $end
$var wire 8 # alu_result [7:0] $end
$var reg 1 $ clk $end
$var reg 1 % reset $end
$scope module dut $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 & zero_flag $end
$var wire 8 ' write_data [7:0] $end
$var wire 1 ( reg_write $end
$var wire 8 ) read_data2 [7:0] $end
$var wire 8 * read_data1 [7:0] $end
$var wire 8 + operand2 [7:0] $end
$var wire 1 , mem_write $end
$var wire 1 - mem_read $end
$var wire 8 . mem_data [7:0] $end
$var wire 1 / jump_zero $end
$var wire 1 0 jump $end
$var wire 16 1 instruction [15:0] $end
$var wire 1 2 imm_mode $end
$var wire 8 3 current_pc [7:0] $end
$var wire 8 4 alu_result [7:0] $end
$var wire 2 5 alu_op [1:0] $end
$scope module uut1 $end
$var wire 1 $ clk $end
$var wire 8 6 jump_addr [7:0] $end
$var wire 1 % reset $end
$var wire 1 & zero_flag $end
$var wire 1 / jump_zero $end
$var wire 1 0 jump $end
$var reg 8 7 current_pc [7:0] $end
$upscope $end
$scope module uut2 $end
$var wire 8 8 pc [7:0] $end
$var reg 16 9 instruction [15:0] $end
$upscope $end
$scope module uut3 $end
$var wire 4 : opcode [3:0] $end
$var reg 2 ; alu_op [1:0] $end
$var reg 1 2 imm_mode $end
$var reg 1 0 jump $end
$var reg 1 / jump_zero $end
$var reg 1 - mem_read $end
$var reg 1 , mem_write $end
$var reg 1 ( reg_write $end
$upscope $end
$scope module uut4 $end
$var wire 1 $ clk $end
$var wire 4 < read_reg_addr1 [3:0] $end
$var wire 4 = read_reg_addr2 [3:0] $end
$var wire 1 ( reg_write $end
$var wire 8 > write_data [7:0] $end
$var wire 4 ? write_reg_addr [3:0] $end
$var reg 8 @ read_data1 [7:0] $end
$var reg 8 A read_data2 [7:0] $end
$upscope $end
$scope module uut5 $end
$var wire 1 2 imm_mode $end
$var wire 16 B instruction [15:0] $end
$var wire 8 C read_data2 [7:0] $end
$var reg 8 D operand2 [7:0] $end
$upscope $end
$scope module uut6 $end
$var wire 2 E alu_op [1:0] $end
$var wire 8 F operand1 [7:0] $end
$var wire 8 G operand2 [7:0] $end
$var wire 1 & zero_flag $end
$var reg 8 H result [7:0] $end
$upscope $end
$scope module uut7 $end
$var wire 8 I address [7:0] $end
$var wire 1 $ clk $end
$var wire 1 - mem_read $end
$var wire 1 , mem_write $end
$var wire 8 J write_data [7:0] $end
$var reg 8 K read_data [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx K
bx J
bx I
bx H
bx G
bx F
b0 E
bx D
bx C
b1100000000000101 B
bx A
bx @
b0 ?
b101 >
b0 =
b0 <
b0 ;
b1100 :
b1100000000000101 9
b0 8
b0 7
b0 6
b0 5
bx 4
b0 3
02
b1100000000000101 1
00
0/
bx .
0-
0,
bx +
bx *
bx )
1(
b101 '
x&
1%
0$
bx #
b0 "
b1100000000000101 !
$end
#5000
0&
b101 +
b101 D
b101 G
b101 #
b101 4
b101 H
b101 I
b101 )
b101 A
b101 C
b101 *
b101 @
b101 F
b101 J
b0 .
b0 K
1$
#10000
0$
#15000
x&
b0x0x #
b0x0x 4
b0x0x H
b0x0x I
b111 '
b111 >
bx *
bx @
bx F
bx J
b1 ?
b1 <
b10000 6
b1100000100000111 !
b1100000100000111 1
b1100000100000111 9
b1100000100000111 B
b1 "
b1 3
b1 7
b1 8
1$
0%
#20000
0$
#25000
b111 +
b111 D
b111 G
b101 '
b101 >
b111 )
b111 A
b111 C
1(
0&
b0 ?
b1 =
b0 <
b0 :
b1 6
b101 #
b101 4
b101 H
b101 I
b10000 !
b10000 1
b10000 9
b10000 B
b101 *
b101 @
b101 F
b101 J
b10 "
b10 3
b10 7
b10 8
1$
#30000
0$
#35000
b1010 '
b1010 >
b1111 +
b1111 D
b1111 G
b1010 #
b1010 4
b1010 H
b1010 I
b101 )
b101 A
b101 C
12
b10 5
b10 ;
b10 E
1(
b0 =
b110 :
b0 6
b110000000001111 !
b110000000001111 1
b110000000001111 9
b110000000001111 B
b11 "
b11 3
b11 7
b11 8
1$
#40000
0$
#45000
b11111000 '
b11111000 >
02
b11 5
b11 ;
b11 E
1(
b1 ?
b1 <
b11 :
b10000 6
b1010 +
b1010 D
b1010 G
b11111000 #
b11111000 4
b11111000 H
b11111000 I
b11000100000000 !
b11000100000000 1
b11000100000000 9
b11000100000000 B
b1010 )
b1010 A
b1010 C
b111 *
b111 @
b111 F
b111 J
b100 "
b100 3
b100 7
b100 8
1$
#50000
0$
#55000
b11111111 +
b11111111 D
b11111111 G
b1010 '
b1010 >
bx )
bx A
bx C
12
b0 5
b0 ;
b0 E
1(
b0 ?
b1111 =
b0 <
b100 :
b1111 6
b1010 #
b1010 4
b1010 H
b1010 I
b100000011111111 !
b100000011111111 1
b100000011111111 9
b100000011111111 B
b1010 *
b1010 @
b1010 F
b1010 J
b101 "
b101 3
b101 7
b101 8
1$
#60000
0$
#65000
b0x0x0 '
b0x0x0 >
x&
b0x0x0 #
b0x0x0 4
b0x0x0 H
b0x0x0 I
1/
02
0(
bx +
bx D
bx G
b11 =
b1001 :
b11 6
b1001000000110000 !
b1001000000110000 1
b1001000000110000 9
b1001000000110000 B
b110 "
b110 3
b110 7
b110 8
1$
#70000
0$
#75000
bx #
bx 4
bx H
bx I
bx '
bx >
bx *
bx @
bx F
bx J
0/
bx ?
bx =
bx <
bx :
bx 6
bx !
bx 1
bx 9
bx B
b111 "
b111 3
b111 7
b111 8
1$
#80000
0$
#85000
b1000 "
b1000 3
b1000 7
b1000 8
1$
#90000
0$
#95000
b1001 "
b1001 3
b1001 7
b1001 8
1$
#100000
0$
#105000
b1010 "
b1010 3
b1010 7
b1010 8
1$
#110000
0$
#115000
b1011 "
b1011 3
b1011 7
b1011 8
1$
#120000
0$
#125000
b1100 "
b1100 3
b1100 7
b1100 8
1$
#130000
0$
#135000
b1101 "
b1101 3
b1101 7
b1101 8
1$
#140000
0$
#145000
b1110 "
b1110 3
b1110 7
b1110 8
1$
#150000
0$
#155000
b1111 "
b1111 3
b1111 7
b1111 8
1$
#160000
0$
#165000
b10000 "
b10000 3
b10000 7
b10000 8
1$
